package com.cs.loganalyzer;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.JsonNode;

public class HSQLDBService {

	private static final Logger logger = LoggerFactory.getLogger(HSQLDBService.class);

	static Statement stmt;
	static Connection con;
	static {

		DBManager.startDBServer();
		con = DBManager.getDBConn();
		try {
			stmt = con.createStatement();
			con.setAutoCommit(true);
			// Initialize db environment 
			createTable();
		} catch (SQLException e) {
			logger.error("Exception in static block ", e);
		}

		logger.info("Connection established successfully");
	}

	static int count = 0;

	public static void insertToDB(JsonNode logEvent, long duration, boolean alert) {
		count += 1;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("INSERT INTO LOGEVENT_TBL (ID, DURATION, TYPE, HOST, TIMESTAMP, ALERT) VALUES ( '");
			sb.append(logEvent.get("id"));
			sb.append("' ,'");
			sb.append(duration);
			sb.append("', '");
			sb.append(logEvent.get("type"));
			sb.append("', '");
			sb.append(logEvent.get("host"));
			sb.append("', '");
			sb.append(logEvent.get("timestamp"));
			sb.append("',");
			sb.append(alert);
			sb.append(" )");
			stmt.execute(sb.toString());
		} catch (SQLException e) {
			logger.error("Exception in insertToDB() ", e);
		}
	}

	public static void executeBatch() {
		try {
			stmt.executeBatch();
			stmt.close();
			con.commit();
		} catch (Exception e) {
			logger.error("Exception in executeBatch() ", e);
		} finally {
			try {
				con.close();
			} catch (SQLException e) {
				logger.error("Exception in executeBatch() ", e);
			}
		}
	}

	private static Boolean createTable() {
		Connection con = DBManager.getDBConn();
		logger.info("Connection Obtained");
		Statement stmt = null;
		int result = 0;
		try {
			stmt = con.createStatement();
			result = stmt
					.executeUpdate("CREATE TABLE IF NOT EXISTS LOGEVENT_TBL (eventid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,id VARCHAR(50) NOT NULL, duration VARCHAR(50) NOT NULL, type VARCHAR(20) NOT NULL, host VARCHAR(20) NOT NULL, timestamp VARCHAR(20) NOT NULL, alert BOOLEAN DEFAULT FALSE NOT NULL );");
			stmt.close();
			con.commit();
			con.close();
		} catch (SQLException e) {
			logger.error("Exception in createTable() ", e);
		}
		logger.info("Table setup is ready....");
		return (result == 1 ? Boolean.TRUE : Boolean.FALSE);
	}
}
